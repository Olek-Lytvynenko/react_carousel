{"version":3,"sources":["components/Carousel/Carousel.tsx","components/Input/Input.tsx","App.tsx","index.tsx"],"names":["Carousel","state","position","intervalId","retreat","maxPosition","props","images","length","frameSize","itemWidth","scrollValue","step","show","direction","infinite","clearInterval","setState","Math","min","max","this","window","setInterval","animationDuration","onClick","containerCarouselWidh","className","style","width","transform","transition","map","image","src","alt","type","name","event","currentTarget","disabled","Component","Input","defaultValue","onChange","htmlFor","id","target","App","setInfinite","inputInfinite","setStep","inputStep","value","setWidth","inputWidth","setFrameSize","inputFrameSize","setAnimationDuration","inputAnimationDuration","inputElement","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61776291.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n  onClick: (value: HTMLButtonElement) => void,\n};\n\ntype State = {\n  position: number;\n};\n\nclass Carousel extends Component<Props, State> {\n  state = {\n    position: 0,\n  };\n\n  intervalId = 0;\n\n  retreat = 10;\n\n  componentDidMount() {\n    this.intervalId = window.setInterval(() => {\n      this.show('next');\n    }, this.props.animationDuration);\n  }\n\n  componentDidUpdate(props: Props) {\n    if (props.frameSize !== this.props.frameSize\n      && this.maxPosition() <= this.state.position) {\n      this.setState({\n        position: this.maxPosition(),\n      });\n    }\n\n    if (this.maxPosition() === this.state.position) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  maxPosition = () => (\n    ((this.props.images.length - this.props.frameSize)\n     * (this.props.itemWidth + this.retreat)\n    ));\n\n  scrollValue = () => (\n    (this.props.itemWidth + this.retreat) * this.props.step\n  );\n\n  show = (direction: 'prev' | 'next') => {\n    if (this.props.infinite) {\n      clearInterval(this.intervalId);\n    }\n\n    const { position } = this.state;\n\n    if (direction === 'next' && this.state.position <= this.maxPosition()) {\n      this.setState({\n        position:\n          Math.min(\n            this.maxPosition(),\n            position + this.scrollValue(),\n          ),\n      });\n    }\n\n    if (direction === 'prev' && this.state.position !== 0) {\n      this.setState({\n        position:\n          Math.max(\n            0,\n            position - this.scrollValue(),\n          ),\n      });\n    }\n  };\n\n  render() {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      onClick,\n      animationDuration,\n    } = this.props;\n\n    const { position } = this.state;\n\n    const containerCarouselWidh = frameSize * (itemWidth + this.retreat)\n      - this.retreat;\n\n    return (\n      <div className=\"Carousel\">\n        <div\n          className=\"Carousel__container\"\n          style={{\n            width: `${containerCarouselWidh}px`,\n          }}\n        >\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              transform: `translateX(${-position}px)`,\n              transition: `${animationDuration}ms`,\n            }}\n          >\n            {images.map((image) => (\n              <li className=\"Carousel__item\" key={image}>\n                <img\n                  className=\"Carousel__img\"\n                  src={image}\n                  alt={image}\n                  width={itemWidth}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <button\n          type=\"button\"\n          name=\"prev\"\n          className=\"Carousel__button Carousel__button--prev\"\n          onClick={(event) => {\n            this.show('prev');\n            onClick(event.currentTarget);\n          }}\n          disabled={position === 0}\n        >\n          Prev\n        </button>\n\n        <button\n          type=\"button\"\n          data-cy=\"next\"\n          name=\"next\"\n          className=\"Carousel__button Carousel__button--next\"\n          onClick={(event) => {\n            this.show('next');\n            onClick(event.currentTarget);\n          }}\n          disabled={position === this.maxPosition()}\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './Input.scss';\n\ntype Props = {\n  name: string,\n  min: number,\n  max: number,\n  step: number,\n  defaultValue: number,\n  onChange: (value: HTMLInputElement) => void,\n};\n\nexport const Input: React.FC<Props> = ({\n  name,\n  step,\n  min,\n  max,\n  defaultValue,\n  onChange,\n}) => {\n  return (\n    <>\n      <label htmlFor={name === 'width' ? 'itemId' : `${name}Id`}>{`Set ${name}: `}</label>\n      <input\n        type=\"number\"\n        name={name}\n        id={name === 'width' ? 'itemId' : `${name}Id`}\n        step={step}\n        min={min}\n        max={max}\n        className=\"Inputs__item\"\n        defaultValue={defaultValue}\n        onChange={(event) => {\n          onChange(event.target);\n        }}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel/Carousel';\nimport { Input } from './components/Input/Input';\n\ninterface State {\n  images: string[];\n  step: number;\n  itemWidth: number;\n  frameSize: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  setInfinite = (inputInfinite: HTMLButtonElement) => {\n    if (!inputInfinite) {\n      return;\n    }\n\n    this.setState({ infinite: true });\n  };\n\n  setStep = (inputStep: HTMLInputElement) => {\n    if (!inputStep) {\n      return;\n    }\n\n    this.setState({ step: +inputStep.value });\n  };\n\n  setWidth = (inputWidth: HTMLInputElement) => {\n    if (!inputWidth) {\n      return;\n    }\n\n    this.setState({ itemWidth: +inputWidth.value });\n  };\n\n  setFrameSize = (inputFrameSize: HTMLInputElement) => {\n    if (!inputFrameSize) {\n      return;\n    }\n\n    this.setState({ frameSize: +inputFrameSize.value });\n  };\n\n  setAnimationDuration = (inputAnimationDuration: HTMLInputElement) => {\n    if (!inputAnimationDuration) {\n      return;\n    }\n\n    this.setState({ animationDuration: +inputAnimationDuration.value });\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <div className=\"Inputs\">\n\n          <Input\n            name=\"width\"\n            step={10}\n            min={130}\n            max={500}\n            defaultValue={130}\n            onChange={(inputElement) => {\n              this.setWidth(inputElement);\n            }}\n          />\n\n          <Input\n            name=\"step\"\n            step={1}\n            min={1}\n            max={10}\n            defaultValue={3}\n            onChange={(inputElement) => {\n              this.setStep(inputElement);\n            }}\n          />\n\n          <Input\n            name=\"frame\"\n            step={1}\n            min={3}\n            max={10}\n            defaultValue={3}\n            onChange={(inputElement) => {\n              this.setFrameSize(inputElement);\n            }}\n          />\n\n          <Input\n            name=\"duration\"\n            step={100}\n            min={1000}\n            max={5000}\n            defaultValue={1000}\n            onChange={(inputElement) => {\n              this.setAnimationDuration(inputElement);\n            }}\n          />\n\n        </div>\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n          onClick={(inputElement) => {\n            this.setInfinite(inputElement);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}